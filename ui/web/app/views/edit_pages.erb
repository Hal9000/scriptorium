<!DOCTYPE html>
<html>
<head>
    <title>Edit Pages - Scriptorium</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: #007bff;
            color: white;
            padding: 20px;
        }
        .header h1 {
            margin: 0;
            font-size: 24px;
        }
        .content {
            padding: 20px;
        }
        .message {
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 20px;
        }
        .message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .pages-list {
            margin-bottom: 20px;
        }
        .page-item {
            padding: 4px 0;
            margin-bottom: 4px;
            cursor: pointer;
            transition: all 0.2s;
            font-family: monospace;
        }
        .page-item:hover {
            color: #007bff;
        }
        .page-item.empty {
            font-weight: bold;
        }
        .edit-form {
            display: none;
            margin-top: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 6px;
            border: 1px solid #ddd;
        }
        .edit-form.active {
            display: block;
        }
        .edit-form textarea {
            width: 100%;
            min-height: 300px;
            font-family: monospace;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        .edit-form .buttons {
            margin-top: 15px;
        }
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-right: 10px;
        }
        .btn-primary {
            background: #007bff;
            color: white;
        }
        .btn-primary:hover {
            background: #0056b3;
        }
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        .btn-secondary:hover {
            background: #545b62;
        }
        .button-group {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Edit Pages</h1>
            <p>View: <strong><%= @current_view.name %></strong></p>
        </div>
        
        <div class="content">
            <% if params[:message] %>
                <div class="message success">
                    <%= params[:message] %>
                </div>
            <% end %>
            
            <% if params[:error] %>
                <div class="message error">
                    <%= params[:error] %>
                </div>
            <% end %>
            
            <% if @pages.empty? %>
                <p style="color: #666; font-style: italic;">No pages found in this view.</p>
            <% else %>
                <h3>Pages</h3>
                <p><strong>Click to edit...</strong> <strong>boldface</strong> = empty</p>
                <table class="pages-list" style="width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr>
                            <th style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">File</th>
                            <th style="text-align: left; padding: 8px; border-bottom: 1px solid #ddd;">Title</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% @pages.each do |page| %>
                            <tr class="page-item <%= 'empty' if page[:empty] %>" onclick="editPage('<%= page[:filename] %>', `<%= page[:content].gsub('`', '\\`').gsub('\\', '\\\\') %>`)" style="cursor: pointer; transition: all 0.2s;">
                                <td style="padding: 8px; border-bottom: 1px solid #eee;">
                                    ðŸ“„ <%= page[:filename].sub(/\.lt3$/, '') %>
                                </td>
                                <td style="padding: 8px; border-bottom: 1px solid #eee; color: #666;">
                                    <%= page[:title] || '' %>
                                </td>
                            </tr>
                        <% end %>
                    </tbody>
                </table>
                
                <div id="edit-form" class="edit-form">
                    <h4 id="edit-filename"></h4>
                    <form id="page-form" method="post" action="/edit_pages/save">
                        <input type="hidden" name="filename" id="edit-filename-input">
                        <textarea name="content" id="edit-content" placeholder="Enter page content..."></textarea>
                        <div class="buttons">
                            <button type="button" class="btn btn-primary" onclick="savePage()">Save Page</button>
                            <button type="button" class="btn btn-secondary" onclick="hideEditForm()">Cancel</button>
                        </div>
                    </form>
                </div>
            <% end %>
            
            <div class="button-group">
                <a href="/navbar_config" class="btn btn-secondary">Navbar Config</a>
                <a href="/" class="btn btn-secondary">Back to Dashboard</a>
            </div>
        </div>
    </div>

    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/theme/monokai.min.css">
    
    <!-- CodeMirror JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.js"></script>
    <script>
      // LiveText mode for CodeMirror
      CodeMirror.defineMode("livetext", function() {
        return {
          startState: function() {
            return {
              inRaw: false,
              inComment: false,
              inDef: false,
              inFunc: false,
              inCode: false,
              codeLanguage: null
            };
          },
          
          token: function(stream, state) {
            // Raw blocks
            if (stream.match(/^\.raw\b/)) {
              state.inRaw = true;
              return "keyword";
            }
            if (state.inRaw && stream.match(/^__RAW__/)) {
              state.inRaw = false;
              return "keyword";
            }
            if (state.inRaw) {
              stream.skipToEnd();
              return "string";
            }
            
            // Comment blocks
            if (stream.match(/^\.comment\b/)) {
              state.inComment = true;
              return "keyword";
            }
            if (state.inComment && stream.match(/^\.end\b/)) {
              state.inComment = false;
              return "keyword";
            }
            if (state.inComment) {
              stream.skipToEnd();
              return "comment";
            }
            
            // Code blocks
            if (stream.match(/^\.code\s+(ruby|elixir|bash)\b/)) {
              state.inCode = true;
              state.codeLanguage = stream.match(/^\.code\s+(ruby|elixir|bash)/)[1];
              return "keyword";
            }
            if (state.inCode && stream.match(/^\.end\b/)) {
              state.inCode = false;
              state.codeLanguage = null;
              return "keyword";
            }
            if (state.inCode) {
              stream.skipToEnd();
              return "string";
            }
            
            // Dot commands
            if (stream.match(/^\.\w+/)) {
              return "keyword";
            }
            
            // Variables
            if (stream.match(/^\$\w+/)) {
              return "variable";
            }
            
            // Functions
            if (stream.match(/^\$\$\w+/)) {
              return "function";
            }
            
            // Markers
            if (stream.match(/^[\*_`~]/)) {
              return "formatting";
            }
            
            // Default
            stream.next();
            return null;
          }
        };
      });
    </script>
    
    <script>
        let editor = null;
        
        function editPage(filename, content) {
            alert('editPage called with filename: ' + filename);
            console.log('editPage called with filename:', filename, 'content length:', content.length);
            document.getElementById('edit-filename').textContent = filename;
            document.getElementById('edit-filename-input').value = filename;
            document.getElementById('edit-content').value = content;
            document.getElementById('edit-form').classList.add('active');
            console.log('Edit form activated');
            
            // Initialize CodeMirror if not already done
            if (!editor) {
                console.log('Initializing CodeMirror...');
                editor = CodeMirror.fromTextArea(document.getElementById('edit-content'), {
                    mode: 'livetext',
                    theme: 'monokai',
                    lineNumbers: true,
                    lineWrapping: false,
                    indentUnit: 2,
                    tabSize: 2,
                    indentWithTabs: false,
                    scrollbarStyle: 'native',
                    viewportMargin: Infinity
                });
                console.log('CodeMirror initialized');
                
                // Hide the original textarea
                document.getElementById('edit-content').style.display = 'none';
            } else {
                console.log('Updating existing CodeMirror content');
                // Update content in existing editor
                editor.setValue(content);
            }
            
            // Scroll to edit form
            document.getElementById('edit-form').classList.add('active');
            document.getElementById('edit-form').scrollIntoView({ behavior: 'smooth' });
            console.log('Edit form should now be visible');
        }
        
        function hideEditForm() {
            document.getElementById('edit-form').classList.remove('active');
        }
        
        function savePage() {
            alert('savePage called');
            console.log('savePage called');
            
            // Sync CodeMirror content back to the hidden textarea
            if (editor) {
                const content = editor.getValue();
                console.log('CodeMirror content length:', content.length);
                document.getElementById('edit-content').value = content;
                console.log('Textarea value set, length:', document.getElementById('edit-content').value.length);
            } else {
                console.log('No editor instance found');
            }
            
            // Get form data
            const form = document.getElementById('page-form');
            const formData = new FormData(form);
            
            console.log('Form data:');
            for (let [key, value] of formData.entries()) {
                console.log(`${key}: ${value}`);
            }
            
            // Submit the form
            console.log('Submitting form...');
            form.submit();
        }
        
        function syncCodeMirrorContent() {
            console.log('syncCodeMirrorContent called');
            if (editor) {
                // Sync CodeMirror content back to the hidden textarea
                const content = editor.getValue();
                console.log('CodeMirror content length:', content.length);
                document.getElementById('edit-content').value = content;
                console.log('Textarea value set, length:', document.getElementById('edit-content').value.length);
            } else {
                console.log('No editor instance found');
            }
            console.log('Form submission proceeding...');
            return true; // Allow form submission
        }
    </script>
</body>
</html> 