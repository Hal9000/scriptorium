#!/Users/Hal/.rbenv/versions/3.2.3/bin/ruby

require_relative "../../../lib/scriptorium"
require 'readline' unless ENV['NOREADLINE']

# Main entry point for Scriptorium TUI
class ScriptoriumTUI
  include Scriptorium::Exceptions
  include Scriptorium::Helpers

  def initialize
    # Parse command line arguments for test mode
    @testing = ARGV.include?('--test')
    
    # Remove --test from ARGV so it doesn't interfere with other processing
    ARGV.delete('--test')
    
    # Default to production mode (use core Repo default: ~/.scriptorium)
    @api = Scriptorium::API.new(testmode: @testing)
    setup_readline
  end

  def discover_repo
    if @testing
      if Dir.exist?("scriptorium-TEST")
        puts "Found existing test repository: scriptorium-TEST"
        @testing = "scriptorium-TEST"
        @api = Scriptorium::API.new(testmode: true)
        begin
          @api.open_repo("scriptorium-TEST")
          puts "Current view: #{@api.current_view&.name || 'nil'}"
          puts "Loaded test repository"
          return true
        rescue => e
          puts "Error opening repository: #{e.message}"
          puts e.backtrace.first if @testing
          return false
        end
      else
        puts "No repository found."
        return false
      end
    else
      # Production mode: use core Repo default (~/.scriptorium)
      home = ENV['HOME']
      production_path = "#{home}/.scriptorium"
      
      if Dir.exist?(production_path)
        puts "Found existing production repository: #{production_path}"
        begin
          @api.open_repo(production_path)
          puts "Current view: #{@api.current_view&.name || 'nil'}"
          puts "Loaded production repository"
          return true
        rescue => e
          puts "Error opening repository: #{e.message}"
          return false
        end
      else
        puts "No repository found."
        return false
      end
    end
    return false
  end

  def create_new_repo
    if @testing
      puts "Creating new test repository..."
      @testing = "scriptorium-TEST"
      @api = Scriptorium::API.new(testmode: true)
      begin
        @api.create_repo("scriptorium-TEST")
        puts "Created test repository successfully."
        
        # Run initial setup (like Runeblog)
        get_started
      rescue => e
        puts "Error creating repository: #{e.message}"
        puts e.backtrace.first if @testing
        return false
      end
    else
      puts "Creating new production repository..."
      home = ENV['HOME']
      production_path = "#{home}/.scriptorium"
      
      begin
        # For production, use the full home path
        @api.create_repo(production_path)
        puts "Created production repository successfully."
        
        # Run initial setup (like Runeblog)
        get_started
      rescue => e
        puts "Error creating repository: #{e.message}"
        return false
      end
    end
  end

  def wizard_first_view    
    # Check if this is the first view (only sample view exists)
    views = @api.views
    if views.length == 1 && views[0].name == "sample"
      puts "Let's set up your first view!"
      
      # Create a new view using existing interactive method
      create_view("view")
      
      # Get the current view name (the one we just created)
      current_view = @api.current_view
      return unless current_view
      name = current_view.name
      
      # Ask about layout
      puts
      if yesno("Would you like to edit the layout?")
        @api.edit_file("#{@api.root}/views/#{name}/config/layout.txt")
      end
      
      # Read the layout to see what containers we have
      layout_file = "#{@api.root}/views/#{name}/config/layout.txt"
      layout_content = read_file(layout_file)
      file_containers = layout_content.lines.map { |line| line.split(/\s+/).first }.compact
      
      # Define logical order for containers
      logical_order = ['header', 'main', 'left', 'right', 'footer']
      
      # Use logical order, but only include containers that exist in the file
      containers = logical_order.select { |container| file_containers.include?(container) }
      
      # Configure each container
      containers.each do |container|
        puts
        if yesno("Would you like to configure #{container}?")
          case container
          when 'header'
            # This is complex and will be expanded later
            @api.edit_file("#{@api.root}/views/#{name}/config/header.txt")
          when 'main'
            puts "Main container is just a stub for now"
          when 'left', 'right'
            configure_sidebar_widgets(name, container)
          when 'footer'
            puts "Footer has no real config for now"
          end
        end
      end
      
      puts
      puts "View setup complete!"
    else
      puts "Wizard is only available for the first view setup"
    end
  end

  def configure_sidebar_widgets(view_name, container)
    puts "Add widgets to #{container}? (y/n)"
    return unless yesno("Add widgets to #{container}?")
    
    # Show available widgets
    available_widgets = @api.widgets_available
    puts "Available widgets: #{available_widgets.join(', ')}"
    
    selected_widgets = []
    available_widgets.each do |widget|
      if yesno("Add #{widget} widget?")
        selected_widgets << widget
      end
    end
    
    # Configure each selected widget
    selected_widgets.each do |widget|
      if yesno("Configure #{widget} widget?")
        case widget
        when 'links'
          @api.edit_file("#{@api.root}/views/#{view_name}/widgets/links/list.txt")
        when 'pages'
          configure_pages_widget(view_name)
        end
      end
    end
  end

  def configure_pages_widget(view_name)
    list_file = "#{@api.root}/views/#{view_name}/widgets/pages/list.txt"
    @api.edit_file(list_file)
    
    # Check for missing pages
    pages_list = read_file(list_file, lines: true, chomp: true)
    missing_pages = []
    
    pages_list.each do |page|
      page_file = "#{@api.root}/views/#{view_name}/pages/#{page}.html"
      unless File.exist?(page_file)
        missing_pages << page
      end
    end
    
    if missing_pages.any?
      puts
      puts "Found #{missing_pages.length} missing pages: #{missing_pages.join(', ')}"
      if yesno("Do you want to edit the missing pages?")
        missing_pages.each do |page|
          if yesno("Edit #{page}?")
            @api.edit_file("#{@api.root}/views/#{view_name}/pages/#{page}.html")
          else
            # Create empty .lt3 file
            write_file("#{@api.root}/views/#{view_name}/pages/#{page}.lt3", "")
          end
        end
      else
        # Create empty .lt3 files for all missing pages
        missing_pages.each do |page|
          write_file("#{@api.root}/views/#{view_name}/pages/#{page}.lt3", "")
        end
      end
    else
      puts "[WIZARD] No missing pages found"
    end
  end

  def yesno(question)
    print "#{question} (y/n): "
    response = get_string&.downcase
    response == "y" || response == "yes"
  end

  def get_string
    if STDIN.tty? && !ENV['NOREADLINE']
      result = Readline.readline
      result
    else
      result = gets&.chomp&.strip
      result
    end
  end

  def mainloop
    loop do
      begin
        # Ensure we have a valid API with repository
        if @api.nil? || @api.instance_variable_get(:@repo).nil?
          puts "Error: No valid repository loaded. Exiting."
          return
        end
        
        current_view = @api.current_view
        current_view_name = current_view&.name || "no-view"
        prompt = "[#{current_view_name}] "
        
        # Use regular gets for automated tests, Readline for interactive
        if STDIN.tty? && !ENV['NOREADLINE']
          input = Readline.readline(prompt, true)
        else
          print prompt
          input = gets&.chomp&.strip
        end

        break if input.nil? || input.downcase == "quit" || input.downcase == "q"

        next if input.empty?

        execute_command(input)
      rescue Interrupt
        puts "\nUse 'quit' to exit"
      rescue => e
        puts e.message
        puts e.backtrace.first if @testing
      end
    end

    puts
    puts "  Goodbye!"
    puts
  end

  private

  def setup_readline
    # Only set up Readline if we're not in automated testing mode
    return if ENV['NOREADLINE']
    
    # Set up tab completion
    Readline.completion_proc = proc do |input|
      completions = []
      
      # Split input to get command and arguments
      parts = input.split(/\s+/)
      command = parts[0]&.downcase
      args = parts[1..-1] || []
      
      if args.empty?
        # Complete command names
        commands = %w[view change list new version help quit cv lsv v h q upload copy delete asset configure]
        completions = commands.select { |cmd| cmd.start_with?(command || "") }
      elsif command == "change" || command == "cv"
        # Complete view names
        if @api
          view_names = @api.views.map(&:name)
          completions = view_names.select { |name| name.start_with?(args.last || "") }
        end
      elsif command == "list" && args.length == 1 && args[0] == "views"
        # Complete "list views" command
        completions = []
      elsif command == "list" && args.length == 1 && args[0] == "assets"
        # Complete asset targets
        completions = %w[global library view gem]
      elsif command == "new" && args.length == 1 && args[0] == "view"
        # Suggest common view names for new view
        suggestions = %w[blog personal work tech travel]
        completions = suggestions
      elsif command == "upload" && args.length == 1 && args[0] == "asset"
        # Complete asset targets
        completions = %w[global library view]
      elsif command == "copy" && args.length == 1 && args[0] == "asset"
        # Complete asset targets
        completions = %w[global library view gem]
      elsif command == "delete" && args.length == 1 && args[0] == "asset"
        # Complete asset targets
        completions = %w[global library view]
      elsif command == "asset" && args.length == 1 && args[0] == "info"
        # Complete asset targets
        completions = %w[global library view gem]
      elsif command == "configure" && args.length == 1 && args[0] == "deployment"
        # Complete view names for deployment config
        if @api
          view_names = @api.views.map(&:name)
          completions = view_names
        end
      end
      
      completions
    end
  end

  def create_test_repo
    puts "Creating test repository..."
    @testing = true
    @api = Scriptorium::API.new(testmode: true)
    @api.create_repo("scriptorium-TEST")
    puts "Test repository created successfully!"
  end

  private def execute_command(input)
    parts = input.strip.split(/\s+/, 2)
    cmd = parts[0].downcase
    args = parts[1] || ""



    # Handle multi-word commands first
    if cmd == "list" && (args == "views" || args.start_with?("views "))
      list_views
    elsif cmd == "list" && (args == "posts" || args.start_with?("posts "))
      list_posts
    elsif cmd == "list" && (args == "drafts" || args.start_with?("drafts "))
      list_drafts
    elsif cmd == "list" && (args == "assets" || args.start_with?("assets "))
      list_assets(args)
    elsif cmd == "list" && (args == "widgets" || args.start_with?("widgets "))
      list_widgets
    elsif cmd == "list" && (args == "themes" || args.start_with?("themes "))
      list_themes
    elsif cmd == "change" && (args == "view" || args.start_with?("view "))
      change_view(args)
    elsif cmd == "new" && (args == "view" || args.start_with?("view "))
      create_view(args)
    elsif cmd == "new" && (args == "draft" || args.start_with?("draft "))
      create_draft(args)
    elsif cmd == "new" && (args == "post" || args.start_with?("post "))
      create_post(args)
    elsif cmd == "upload" && (args == "asset" || args.start_with?("asset "))
      upload_asset(args)
    elsif cmd == "copy" && (args == "asset" || args.start_with?("asset "))
      copy_asset(args)
    elsif cmd == "delete" && (args == "asset" || args.start_with?("asset "))
      delete_asset(args)
    elsif cmd == "asset" && (args == "info" || args.start_with?("info "))
      asset_info(args)
    elsif cmd == "configure" && (args == "deployment" || args.start_with?("deployment "))
      configure_deployment(args)
    elsif cmd == "add" && (args == "widget" || args.start_with?("widget "))
      add_widget(args)
    elsif cmd == "config" && (args == "widget" || args.start_with?("widget "))
      config_widget(args)
    elsif cmd == "config" && (args == "social" || args.start_with?("social "))
      config_social
    elsif cmd == "config" && (args == "reddit" || args.start_with?("reddit "))
      config_reddit
    elsif cmd == "clone" && (args == "theme" || args.start_with?("theme "))
      clone_theme(args[6..-1])  # Remove "theme " prefix
    elsif cmd == "delete" && (args == "theme" || args.start_with?("theme "))
      delete_theme(args)

    else
      # Handle single-word commands
      case cmd
      when "help", "h"
        show_help
      when "view"
        show_current_view
      when "cv"
        change_view(args)
      when "lsv"
        list_views
      when "lsp"
        list_posts
      when "lsd"
        list_drafts
      when "cd"
        create_draft("draft")
      when "version", "v"
        show_version
      when "deploy"
        deploy_current_view
      when "preview"
        preview_current_view
        preview_current_view
      when "browse"
        browse_deployed_view
      when "generate"
        generate_current_view
      when "quit", "q"
        exit 0
      else
        puts
        puts "  Unknown command: #{cmd}. Type 'help' for available commands."
        puts
      end
    end
  end

  private def show_help
    puts
    puts <<~HELP
      Scriptorium CLI - Blog Management Tool
      
      Usage: scriptorium [--test]
      
      Flags:
        --test                    - Use test repository (scriptorium-TEST)
                                  - Default: production repository (~/.scriptorium)
      
      Commands:
        view                       - Show current view
        change view [<name>]       - Switch to a view
        cv [<name>]                  
        list views                 - List all views
        lsv
        new view [<name> <title>]  - Create a new view
      
        list posts                 - List posts in current view
        lsp
        list drafts                - List all drafts
        lsd
        new post [<title>]         - Create draft, edit, and convert to post

        list assets [target]       - List assets (global, library, view, gem)
        upload asset [file] [target] - Upload file to asset location
        copy asset [file] [from] [to] - Copy asset between locations
        delete asset [file] [target] - Delete asset from location
        asset info [file] [target]  - Show asset information
        configure deployment [view] - Edit deployment configuration
        deploy                 - Deploy current view to server
        preview                - Preview current view locally
        browse                 - Browse deployed view on server
      
        list widgets           - List available and configured widgets
        add widget <name>      - Add widget to current view
        config widget <name>   - Configure widget data
      
        config social          - Configure social media sharing
        config reddit          - Configure Reddit sharing buttons
        generate               - Regenerate current view
      
        list themes            - List available themes
        clone theme <source> <name>  - Clone a theme
        delete theme <path>    - Delete a user theme
      
        version, v                - Show version
        help, h                   - Show this help
        quit, q, ^D                   - Exit
    HELP
    puts
  end

  private def show_current_view
    current_view = @api.current_view
    current_view_name = current_view&.name || "none"
    puts
    puts "  Current view: #{current_view_name}"
    puts
  end

  private def change_view(args)
    # Handle "change view <name>" format
    if args == "view" || args.start_with?("view ")
      # Remove "view " prefix if present, otherwise args is just "view"
      view_name = args == "view" ? "" : args[5..-1].strip
    else
      view_name = args.strip
    end
    
    if view_name.empty?
      # Interactive mode - prompt for view name
      puts
      puts "  Available views:"
      views = @api.views
      if views.empty?
        puts "    No views found"
        puts
        return
      else
        current_view = @api.current_view
        current_view_name = current_view&.name
        
        views.each do |view|
          current = view.name == current_view_name ? "*" : " "
          puts "    #{current} #{view.name} - #{view.title}"
        end
        puts
      end
      
      print "  Enter view name: "
      view_name = gets&.chomp&.strip
      return if view_name.nil? || view_name.empty?
    end

    begin
      view = @api.lookup_view(view_name)
      @api.view(view_name)
      puts
      puts "  Switched to view '#{view_name}'"
      puts
    rescue Exception => e
      puts
      puts "  View '#{view_name}' not found"
      puts
    end
  end

  private def create_view(args)
    # Handle "new view" format - prompt for all parameters
    if args == "view" || args.start_with?("view ")
      # Remove "view " prefix if present, otherwise args is just "view"
      view_args = args == "view" ? "" : args[5..-1]
      
      if view_args.strip.empty?
        # Interactive mode - prompt for all parameters
        print "  Enter view name: "
        name = get_string
        return if name.nil? || name.empty?
        
        print "  Enter view title: "
        title = get_string
        return if title.nil? || title.empty?
        
        print "  Enter subtitle (optional): "
        subtitle = get_string
        subtitle = nil if subtitle.empty?
        
        # Check if view already exists
        existing_views = @api.views
        if existing_views.any? { |view| view.name == name }
          puts
          puts "  View '#{name}' already exists"
          puts
          return
        end
        
        # Create view with all parameters
        begin
          @api.create_view(name, title, subtitle, theme: "standard")
          puts
          puts "  Created view '#{name}' with title '#{title}'"
          puts "  Switched to view '#{name}'"
          puts
        rescue Exception => e
          puts
          puts "  #{e.message}"
          puts
        end
      else
        # Legacy mode - still support "new view <name> <title>"
        parts = view_args.split(/\s+/, 2)
        if parts.length < 2
          puts
          puts "  Usage: new view [<name> <title>]"
          puts
          return
        end

        name, title = parts
        
        # Check if view already exists BEFORE prompting for subtitle
        existing_views = @api.views
        if existing_views.any? { |view| view.name == name }
          puts
          puts "  View '#{name}' already exists"
          puts
          return
        end
        
        # Prompt for subtitle only if view doesn't exist
        print "  Enter subtitle (optional): "
        subtitle = get_string
        subtitle = nil if subtitle.empty?
        
        # Create view with all parameters
        begin
          @api.create_view(name, title, subtitle, theme: "standard")
          puts
          puts "  Created view '#{name}' with title '#{title}'"
          puts "  Switched to view '#{name}'"
          puts
        rescue Exception => e
          puts
          puts "  #{e.message}"
          puts
        end
      end
    else
      puts
      puts "  Usage: new view [<name> <title>]"
      puts
    end
  end

  private def create_draft(args)
    # Handle "new draft" format - prompt for all parameters
    if args == "draft" || args.start_with?("draft ")
      # Remove "draft " prefix if present, otherwise args is just "draft"
      draft_args = args == "draft" ? "" : args[6..-1]
      
      if draft_args.strip.empty?
        # Interactive mode - prompt for all parameters
        print "  Enter draft title: "
        title = gets&.chomp&.strip
        return if title.nil? || title.empty?
        
        print "  Enter draft body: "
        body = gets&.chomp&.strip
        return if body.nil? || body.empty?
        
        print "  Enter tags (optional, comma-separated): "
        tags_input = gets&.chomp&.strip
        tags = tags_input.empty? ? nil : tags_input.split(",").map(&:strip)
        
        print "  Enter blurb (optional): "
        blurb = gets&.chomp&.strip
        blurb = nil if blurb.empty?
        
        # Create draft with all parameters
        draft_path = @api.create_draft(
          title: title,
          body: body,
          views: @api.current_view&.name,
          tags: tags,
          blurb: blurb
        )
        puts
        puts "  Created draft: #{draft_path}"
        puts
      else
        # Legacy mode - still support "new draft <title>"
        title = draft_args.strip
        
        print "  Enter draft body: "
        body = gets&.chomp&.strip
        return if body.nil? || body.empty?
        
        print "  Enter tags (optional, comma-separated): "
        tags_input = gets&.chomp&.strip
        tags = tags_input.empty? ? nil : tags_input.split(",").map(&:strip)
        
        print "  Enter blurb (optional): "
        blurb = gets&.chomp&.strip
        blurb = nil if blurb.empty?
        
        # Create draft with all parameters
        draft_path = @api.create_draft(
          title: title,
          body: body,
          views: @api.current_view&.name,
          tags: tags,
          blurb: blurb
        )
        puts
        puts "  Created draft: #{draft_path}"
        puts
      end
    else
      puts
      puts "  Usage: new draft [<title>]"
      puts
    end
  end

  def show_version
    puts
    puts "  Scriptorium #{Scriptorium::VERSION}"
    puts
  end

  def get_started
    puts
    puts "  No editor configured. Let's set one up."
    pick_editor
    
    puts
    puts "  Setup complete!"
    puts "  You can now use 'new post <title>' to create posts with your editor."
    puts
  end

  def pick_editor
    puts
    puts "  Available editors:"
    
    # Check for common editors (prioritized for single file editing)
    editors = []
    %w[nano vim emacs vi micro].each do |editor|
      if which(editor)
        editors << editor
      end
    end
    
    # The original Unix line editor - for the brave souls who want ultimate speed
    if which("ed")
      editors << "ed"
    end
    
    
    if editors.empty?
      puts "    No common editors found. Please install nano, vim, emacs, vi, micro, or ed."
      puts "    You can manually set your editor later by editing config/editor.txt"
      puts
      return
    end
    
    # Show available editors
    editors.each_with_index do |editor, index|
      puts "    #{index + 1}. #{editor}"
    end
    
    # Let user pick
    print "  Choose editor (1-#{editors.length}): "
    choice = get_string
    
    if choice && choice.match?(/^\d+$/) && choice.to_i.between?(1, editors.length)
      selected_editor = editors[choice.to_i - 1]
      
      # Save the choice
          make_dir(@api.root/"config")
    write_file(@api.root/"config/editor.txt", selected_editor)
      
      puts
      puts "  Selected editor: #{selected_editor}"
      puts "  Editor preference saved to config/editor.txt"
    else
      puts
      puts "  Invalid choice. Editor not changed."
    end
  end

  def list_views
    puts
    views = @api.views
    if views.empty?
      puts "  No views found"
    else
      current_view = @api.current_view
      current_view_name = current_view&.name
      
      views.each do |view|
        current = view.name == current_view_name ? "*" : " "
        puts "    #{current} #{view.name}  #{view.title}"
      end
    end
    puts
  end

  def which(command)
    # Mock which in test mode to avoid hanging
    if @testing
      case command
      when 'nano', 'vim', 'vi', 'ed'
        "/usr/bin/#{command}"
      else
        nil
      end
    else
      # Use File.which if available (Ruby 3.2+)
      if File.respond_to?(:which)
        File.which(command)
      else
        # Fall back to system call
        result = `which #{command} 2>/dev/null`.chomp
        result.empty? ? nil : result
      end
    end
  end

  private def create_post(args)
    # Handle "new post <title>" format
    if args == "post" || args.start_with?("post ")
      # Remove "post " prefix if present, otherwise args is just "post"
      post_args = args == "post" ? "" : args[5..-1]
      
      if post_args.strip.empty?
        # Interactive mode - prompt for title
        print "  Enter post title: "
        title = gets&.chomp&.strip
        return if title.nil? || title.empty?
      else
        # Use provided title
        title = post_args.strip
      end
      
      # Check if editor is configured
      editor_file = @api.root/"config/editor.txt"
      unless File.exist?(editor_file)
        puts
        puts "  No editor configured. Please configure an editor in config/editor.txt"
        puts
        return
      end
      
      editor = read_file(editor_file).strip
      
      # Create draft
      begin
        draft_path = @api.create_draft(
          title: title,
          body: "",  # Empty body to start
          views: @api.current_view&.name,
          tags: nil,
          blurb: nil
        )
        
        puts
        puts "  Created draft: #{File.basename(draft_path)}"
        puts "  Opening in #{editor}..."
        puts
        
        # Open in editor
        system("#{editor} #{draft_path}")
        
        puts
        puts "  Converting draft to post..."
        
        # Convert draft to post (like Runeblog)
        begin
          post_num = @api.finish_draft(draft_path)
          post = @api.post(post_num)
          if post && post.title
            puts "  Post created: ##{post_num} - #{post.title}"
          else
            puts "  Post created: ##{post_num}"
          end
          puts "  Use 'deploy' to publish to server when ready."
        rescue => e
          puts "  Error converting to post: #{e.message}"
        end
        
        puts
        
      rescue => e
        puts
        puts "  Error creating post: #{e.message}"
        puts
      end
    else
      puts
      puts "  Usage: new post [<title>]"
      puts
    end
  end

  private def list_posts
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    posts = @api.all_posts(current_view)
    
    puts
    if posts.empty?
      puts "  No posts found in view '#{current_view.name}'"
    else
      puts "  Posts in view '#{current_view.name}':"
      posts.each do |post|
        puts "    #{post.title}"
      end
    end
    puts
  end

  private def list_drafts
    drafts_dir = @api.root/:drafts
    return unless Dir.exist?(drafts_dir)
    
    draft_files = Dir.glob("#{drafts_dir}/*-draft.lt3")
    
    puts
    if draft_files.empty?
      puts "  No drafts found"
    else
      draft_files.each do |file|
        filename = File.basename(file)
        puts "    #{filename}"
      end
    end
    puts
  end

  private def log_tty(str)
    log_entry = "DEBUG: #{s}"
    File.open('debug.log', 'a') { |f| f.puts log_entry }
    tty = File.open('/dev/tty', 'w')
    tty.puts log_entry
    tty.close
  end

  private def deploy_current_view
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    # Check deployment readiness first
    unless @api.can_deploy?(current_view.name)
      puts "  Deployment error: View '#{current_view.name}' is not ready for deployment. Check status and configuration."
      puts
      return
    end
    
    # Use the API's deploy method
    result = @api.deploy(current_view.name)
    if result
      puts "  Deployment completed!"
    else
      puts "  Deployment failed!"
    end
    puts
  end

  private def extract_domain_from_deploy_config(config)
    # user@example.com:/path/ -> example.com
    if config =~ /@([^:]+):/
      $1
    end
  end

  private def verify_deployment(domain)
    url = "https://#{domain}/last-deployed.txt"
    puts "  Verifying deployment..."
    
    require 'net/http'
    begin
      response = Net::HTTP.get_response(URI(url))
      if response.code == "200"
        puts "  ✅ Deployment verified!"
      else
        puts "  ⚠️  Deployment verification failed (HTTP #{response.code})"
      end
    rescue => e
      puts "  ⚠️  Deployment verification failed: #{e.message}"
    end
  end

  private def preview_current_view
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    # Check if output directory exists
    output_dir = current_view.dir/:output
    unless Dir.exist?(output_dir)
      puts
      puts "  Output directory does not exist: #{output_dir}"
      puts "  Generate content first with 'new post' or similar."
      puts
      return
    end

    # Find the main index file
    index_file = output_dir/"index.html"
    unless File.exist?(index_file)
      puts
      puts "  No index.html found in output directory"
      puts "  Generate content first with 'new post' or similar."
      puts
      return
    end

    # Load OS-specific helper and open the file
    load_os_helpers
    puts
    puts "  Opening preview of view '#{current_view.name}'..."
    open_file(index_file)
    puts
  end

  private def browse_deployed_view
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    # Check if deploy config exists
    deploy_config_file = current_view.dir/:config/"deploy.txt"
    unless File.exist?(deploy_config_file)
      puts
      puts "  No deployment configuration found."
      puts "  Create #{deploy_config_file} with format:"
      puts "    user@server:path"
      puts
      return
    end

    # Read deployment configuration and extract domain
    deploy_config = read_file(deploy_config_file).strip
    if deploy_config.empty?
      puts
      puts "  Deployment configuration is empty."
      puts
      return
    end

    # Extract domain for browsing
    domain = extract_domain_from_deploy_config(deploy_config)
    unless domain
      puts
      puts "  Could not extract domain from deployment configuration."
      puts
      return
    end

    # Load OS-specific helper and open the URL
    load_os_helpers
    url = "https://#{domain}/"
    puts
    puts "  Opening deployed view at: #{url}"
    open_file(url)
    puts
  end

  private def load_os_helpers
    # Load the OS-specific helper functions
    os_helpers_file = @api.root/:config/"os_helpers.rb"
    if File.exist?(os_helpers_file)
      load os_helpers_file
    else
      puts "  Warning: OS helpers not found. Preview/browse may not work."
    end
  end

  private def list_widgets
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    # Get available widgets
    available_widgets = @api.widgets_available
    puts
    puts "  Available widgets: #{available_widgets.join(', ')}"
    
    # Check which widgets are configured
    configured_widgets = []
    available_widgets.each do |widget|
      widget_dir = current_view.dir/:widgets/widget
      if Dir.exist?(widget_dir)
        configured_widgets << widget
      end
    end
    
    puts "  Configured widgets: #{configured_widgets.empty? ? 'none' : configured_widgets.join(', ')}"
    puts
  end

  private def add_widget(args)
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    # Parse widget name from args
    widget_name = args.sub(/^widget\s+/, '').strip
    if widget_name.empty?
      puts
      puts "  Usage: add widget <name>"
      puts "  Example: add widget links"
      puts
      return
    end

    # Check if widget is available
    available_widgets = @api.widgets_available
    unless available_widgets.include?(widget_name)
      puts
      puts "  Widget '#{widget_name}' is not available."
      puts "  Available widgets: #{available_widgets.join(', ')}"
      puts
      return
    end

    # Check if widget is already configured
    widget_dir = current_view.dir/:widgets/widget_name
    if Dir.exist?(widget_dir)
      puts
      puts "  Widget '#{widget_name}' is already configured."
      puts
      return
    end

    # Determine container (left/right)
    container = determine_widget_container(current_view)
    unless container
      puts
      puts "  Error: No left or right container found in layout."
      puts "  Add a left or right container to your layout first."
      puts
      return
    end

    # Create widget directory and list.txt
    make_dir(widget_dir)
    list_file = widget_dir/"list.txt"
    write_file(list_file, "# Add #{widget_name} items here\n")
    
    puts
    puts "  Added widget '#{widget_name}' to #{container} container."
    puts "  Use 'config widget #{widget_name}' to configure it."
    puts
  end

  private def config_widget(args)
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    # Parse widget name from args
    widget_name = args.sub(/^widget\s+/, '').strip
    if widget_name.empty?
      puts
      puts "  Usage: config widget <name>"
      puts "  Example: config widget links"
      puts
      return
    end

    # Check if widget is configured
    widget_dir = current_view.dir/:widgets/widget_name
    unless Dir.exist?(widget_dir)
      puts
      puts "  Widget '#{widget_name}' is not configured."
      puts "  Use 'add widget #{widget_name}' to add it first."
      puts
      return
    end

    list_file = widget_dir/"list.txt"
    unless File.exist?(list_file)
      puts
      puts "  Error: Widget list file not found: #{list_file}"
      puts
      return
    end

    # Show widget-specific instructions
    show_widget_instructions(widget_name)
    
    puts "  Press Enter to edit the widget data file..."
    gets
    
    @api.edit_file(list_file)
    
    # Regenerate the widget after editing
    puts "  Regenerating widget..."
    begin
      @api.generate_widget(widget_name)
      puts "  ✅ Widget regenerated successfully!"
    rescue => e
      puts "  ⚠️  Widget regeneration failed: #{e.message}"
    end
    puts
  end

  private def config_social
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    social_config_file = current_view.dir/:config/"social.txt"
    unless File.exist?(social_config_file)
      puts
      puts "  Social configuration file not found: #{social_config_file}"
      puts
      return
    end

    puts
    puts "  Social Media Sharing Configuration"
    puts "  ================================="
    puts
    puts "  This feature adds social media meta tags to your posts for better sharing."
    puts "  When enabled, posts will have proper Open Graph and Twitter Card meta tags."
    puts
    puts "  Configuration:"
    puts "  - List one platform per line to enable (facebook, twitter, linkedin, reddit)"
    puts "  - If no platforms listed, social meta tags are disabled"
    puts "  - For Reddit buttons, also configure reddit.txt file"
    puts
    puts "  No Facebook App ID or Twitter username required for basic meta tags."
    puts "  These are only needed if you want to add social sharing buttons later."
    puts
    puts "  Press Enter to edit the configuration file..."
    gets

    @api.edit_file(social_config_file)
    
    puts
    puts "  Social configuration updated."
    puts "  Regenerate your view to apply changes:"
    puts "    generate"
    puts
  end

  private def config_reddit
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    reddit_config_file = current_view.dir/:config/"reddit.txt"
    unless File.exist?(reddit_config_file)
      puts
      puts "  Reddit configuration file not found: #{reddit_config_file}"
      puts "  Creating new Reddit configuration file..."
      puts
      # Create the file with default content
      write_file(reddit_config_file, @api.repo.predef.reddit_config)
    end

    puts
    puts "  Reddit Sharing Button Configuration"
    puts "  =================================="
    puts
    puts "  This feature adds Reddit share buttons to your posts."
    puts "  When enabled, readers can easily share your posts to Reddit."
    puts
    puts "  Configuration options:"
    puts "  - button: true/false - Enable or disable Reddit share button"
    puts "  - subreddit: <name> - Specify a subreddit for direct posting (optional)"
    puts "  - hover_text: <text> - Custom hover text (optional)"
    puts
    puts "  Examples:"
    puts "    button true"
    puts "    subreddit RubyElixirEtc"
    puts "    hover_text \"Share on RubyElixirEtc\""
    puts
    puts "  Note: Reddit must also be enabled in social.txt for buttons to appear."
    puts
    puts "  Press Enter to edit the configuration file..."
    gets

    @api.edit_file(reddit_config_file)
    
    puts
    puts "  Reddit configuration updated."
    puts "  Regenerate your view to apply changes:"
    puts "    generate"
    puts
  end

  private def generate_current_view
    current_view = @api.current_view
    if current_view.nil?
      puts
      puts "  No current view selected"
      puts
      return
    end

    puts
    puts "  Regenerating view '#{current_view.name}'..."
    begin
      @api.generate_view(current_view.name)
      puts "  ✅ View regenerated successfully!"
    rescue => e
      puts "  ⚠️  View regeneration failed: #{e.message}"
    end
    puts
  end

  private def determine_widget_container(view)
    # Check which containers exist in the layout
    layout_file = view.dir/:config/"layout.txt"
    return nil unless File.exist?(layout_file)
    
    layout_content = read_file(layout_file)
    has_left = layout_content.include?('left')
    has_right = layout_content.include?('right')
    
    if has_left && has_right
      # Both exist, prompt user
      puts
      puts "  Both left and right containers found."
      puts "  Which container should the widget go in?"
      puts "  (l) left  (r) right"
      print "  Choice: "
      choice = gets&.chomp&.downcase
      
      case choice
      when 'l', 'left'
        'left'
      when 'r', 'right'
        'right'
      else
        puts "  Invalid choice. Widget not added."
        nil
      end
    elsif has_left
      'left'
    elsif has_right
      'right'
    else
      nil
    end
  end

  private def show_widget_instructions(widget_name)
    case widget_name
    when 'links'
      puts
      puts "  Links Widget Configuration:"
      puts "  Format: <url> <title>"
      puts "  Example:"
      puts "    https://example.com My Website"
      puts "    https://github.com GitHub"
      puts
    when 'pages'
      puts
      puts "  Pages Widget Configuration:"
      puts "  Format: <filename> <title>"
      puts "  Example:"
      puts "    about.html About Us"
      puts "    contact.html Contact"
      puts
    when 'featuredposts'
      puts
      puts "  Featured Posts Widget Configuration:"
      puts "  Format: <post_id> <optional_title>"
      puts "  Example:"
      puts "    0001 My First Post"
      puts "    0002"
      puts
    else
      puts
      puts "  Widget Configuration:"
      puts "  Edit the list.txt file to configure widget data."
      puts
    end
  end

  private def list_themes
    puts
    themes = @api.themes_available
    
    if themes.empty?
      puts "  No themes found"
    else
      # Group by type
      system_themes = themes.select { |t| t[:type] == 'system' }
      user_themes = themes.select { |t| t[:type] == 'user' }
      shared_themes = themes.select { |t| t[:type] == 'shared' }
      
      puts "  System Themes (Read-only):"
      if system_themes.empty?
        puts "    none"
      else
        system_themes.each { |t| puts "    #{t[:name]} (#{t[:path]})" }
      end
      
      puts "  User Themes (Editable):"
      if user_themes.empty?
        puts "    none"
      else
        user_themes.each { |t| puts "    #{t[:name]} (#{t[:path]})" }
      end
      
      puts "  Shared Themes (Community):"
      if shared_themes.empty?
        puts "    none"
      else
        shared_themes.each { |t| puts "    #{t[:name]} (#{t[:path]})" }
      end
    end
    puts
  end

  private def clone_theme(args)
    parts = args.split(/\s+/)
    if parts.length != 2
      puts
      puts "  Usage: clone theme <source> <newname>"
      puts "  Example: clone theme standard my-custom"
      puts "  Note: Cloned themes become user themes"
      puts
      return
    end

    source, newname = parts[0], parts[1]
    
    begin
      # Use the new API method for cloning
      result = @api.clone_theme(source, newname)
      
      if result
        puts
        puts "  ✅ Theme cloned successfully: #{source} → #{result}"
        puts "  Use 'config theme #{result}' to customize your theme"
        puts
      else
        puts
        puts "  ❌ Failed to clone theme"
        puts
      end
    rescue => e
      puts
      puts "  ❌ Failed to clone theme: #{e.message}"
      puts
      puts
    end
  end

  private def delete_theme(args)
    parts = args.split(/\s+/)
    if parts.length != 2
      puts
      puts "  Usage: delete theme <theme_path>"
      puts "  Example: delete theme user/my-custom"
      puts "  Note: Can only delete user themes"
      puts
      return
    end

    theme_path = parts[1]
    
    begin
      # Use the new API method for deleting
      result = @api.delete_theme(theme_path)
      
      if result
        puts
        puts "  ✅ Theme deleted successfully: #{theme_path}"
        puts
      else
        puts
        puts "  ❌ Failed to delete theme"
        puts
      end
    rescue => e
      puts
      puts "  ❌ Failed to delete theme: #{e.message}"
      puts
    end
  end

  # Asset Management Commands

  private def list_assets(args)
    parts = args.split(/\s+/)
    target = parts[1] || 'global'
    
    unless %w[global library view gem].include?(target)
      puts
      puts "  Usage: list assets [target]"
      puts "  Targets: global, library, view, gem"
      puts "  Example: list assets view"
      puts
      return
    end

    begin
      assets = @api.list_assets(target: target, view: @api.current_view&.name)
      if assets.empty?
        puts
        puts "  No assets found in #{target}"
        puts
      else
        puts
        puts "  Assets in #{target}:"
        assets.each do |asset|
          puts "    #{asset[:filename]} (#{asset[:size]} bytes, #{asset[:type]})"
          puts "      Path: #{asset[:path]}"
          puts "      Dimensions: #{asset[:dimensions] || 'N/A'}"
        end
        puts
      end
    rescue => e
      puts
      puts "  ❌ Failed to list assets: #{e.message}"
      puts
    end
  end

  private def upload_asset(args)
    parts = args.split(/\s+/)
    if parts.length < 2
      puts
      puts "  Usage: upload asset <filepath> [target]"
      puts "  Targets: global, library, view"
      puts "  Example: upload asset /path/to/image.jpg global"
      puts
      return
    end

    filepath = parts[1]
    target = parts[2] || 'global'
    
    unless %w[global library view].include?(target)
      puts
      puts "  Invalid target: #{target}"
      puts "  Valid targets: global, library, view"
      puts
      return
    end

    unless File.exist?(filepath)
      puts
      puts "  ❌ File not found: #{filepath}"
      puts
      return
    end

    begin
      result = @api.upload_asset(filepath, target: target, view: @api.current_view&.name)
      puts
      puts "  ✅ Asset uploaded successfully to #{target}"
      puts "  Filename: #{result[:filename]}"
      puts "  Size: #{result[:size]} bytes"
      puts
    rescue => e
      puts
      puts "  ❌ Failed to upload asset: #{e.message}"
      puts
    end
  end

  private def copy_asset(args)
    parts = args.split(/\s+/)
    if parts.length < 3
      puts
      puts "  Usage: copy asset <filename> <from> <to>"
      puts "  From/To: global, library, view, gem"
      puts "  Example: copy asset logo.png gem global"
      puts
      return
    end

    filename = parts[1]
    from = parts[2]
    to = parts[3]
    
    unless %w[global library view gem].include?(from) && %w[global library view].include?(to)
      puts
      puts "  Invalid source or target"
      puts "  Valid sources: global, library, view, gem"
      puts "  Valid targets: global, library, view"
      puts
      return
    end

    begin
      result = @api.copy_asset(filename, from: from, to: to, view: @api.current_view&.name)
      puts
      puts "  ✅ Asset copied successfully"
      puts "  From: #{from} (#{result[:from_path]})"
      puts "  To: #{to} (#{result[:to_path]})"
      puts
    rescue => e
      puts
      puts "  ❌ Failed to copy asset: #{e.message}"
      puts
    end
  end

  private def delete_asset(args)
    parts = args.split(/\s+/)
    if parts.length < 2
      puts
      puts "  Usage: delete asset <filename> [target]"
      puts "  Targets: global, library, view"
      puts "  Example: delete asset old-image.jpg global"
      puts
      return
    end

    filename = parts[1]
    target = parts[2] || 'global'
    
    unless %w[global library view].include?(target)
      puts
      puts "  Invalid target: #{target}"
      puts "  Valid targets: global, library, view"
      puts
      return
    end

    begin
      @api.delete_asset(filename, target: target, view: @api.current_view&.name)
      puts
      puts "  ✅ Asset deleted successfully from #{target}"
      puts
    rescue => e
      puts
      puts "  ❌ Failed to delete asset: #{e.message}"
      puts
    end
  end

  private def asset_info(args)
    parts = args.split(/\s+/)
    if parts.length < 2
      puts
      puts "  Usage: asset info <filename> [target]"
      puts "  Targets: global, library, view, gem"
      puts "  Example: asset info logo.png global"
      puts
      return
    end

    filename = parts[1]
    target = parts[2] || 'global'
    
    unless %w[global library view gem].include?(target)
      puts
      puts "  Invalid target: #{target}"
      puts "  Valid targets: global, library, view, gem"
      puts
      return
    end

    begin
      info = @api.get_asset_info(filename, target: target, view: @api.current_view&.name)
      if info.nil?
        puts
        puts "  ❌ Asset not found: #{filename}"
        puts
        return
      end
      
      puts
      puts "  Asset Information:"
      puts "  Filename: #{info[:filename]}"
      puts "  Size: #{info[:size]} bytes"
      puts "  Type: #{info[:type]}"
      puts "  Path: #{info[:path]}"
      puts "  Dimensions: #{info[:dimensions] || 'N/A'}"
      puts
    rescue => e
      puts
      puts "  ❌ Failed to get asset info: #{e.message}"
      puts
    end
  end

  private def configure_deployment(args)
    parts = args.split(/\s+/)
    view_name = parts[1] || @api.current_view&.name
    
    unless view_name
      puts
      puts "  ❌ No view specified and no current view"
      puts
      return
    end

    begin
      deploy_file = @api.root/"views"/view_name/"config"/"deploy.txt"
      puts "DEBUG: About to edit file: #{deploy_file}"
      puts "DEBUG: File exists: #{File.exist?(deploy_file)}"
      
      # Use TUI's editor configuration instead of API's edit_file
      editor_file = @api.root/"config/editor.txt"
      if File.exist?(editor_file)
        editor = read_file(editor_file).strip
        puts "DEBUG: Using TUI editor: #{editor}"
        system("#{editor} #{deploy_file}")
      else
        puts "DEBUG: No TUI editor config, using API edit_file"
        @api.edit_file(deploy_file)
      end
      
      puts "DEBUG: edit_file returned"
      puts
      puts "  ✅ Deployment configuration edited for view: #{view_name}"
      puts
    rescue => e
      puts "DEBUG: Exception in configure_deployment: #{e.class} - #{e.message}"
      puts
      puts "  ❌ Failed to edit deployment configuration: #{e.message}"
      puts
    end
  end

end

###### Main ######

s = ScriptoriumTUI.new

# Auto-discovery: check for existing repo
got_repo = s.discover_repo

unless got_repo
  if s.yesno("Create new repository?")
    s.create_new_repo
    ques = "Do you want assistance in creating your first view?"
    if s.yesno(ques)
      s.wizard_first_view
    end
  end
end

# Main REPL loop
s.mainloop 