 Look for UNIT to mark things that might need unit tests...

---- File: lib/publish.rb
 
  require 'pathmagic'
  require 'processing'
  class RuneBlog::Publishing
    attr_reader :user, :server, :docroot, :path
    def initialize(view)
    def to_h                  # UNIT
    def url                   # UNIT
    def check_new_posts
    def publish
    def remote_login?
    def remote_permissions?

---- File: lib/menus.rb
 
  require 'ostruct'
  require 'rubytext'
  require 'repl'
  def edit(str)
  def edit_blog_generate
  def edit_blog_head
  def edit_blog_index
  def edit_post_entry
  def edit_blog_banner
  def edit_blog_navbar
  def edit_post_generate
  def edit_post_head
  def edit_post_index
  def edit_view_global
  def edit_settings_view
  def edit_settings_recent
  def edit_settings_publish
  def edit_settings_features
  def edit_config_reddit
  def edit_config_facebook
  def edit_config_twitter
  def edit_etc_blog_css
  def edit_etc_externals
  def show_top_menu

---- File: lib/processing.rb
 
  require 'livetext'
  def newer?(f1, f2)                   # UNIT
  def stale?(src, dst, deps, force = false)                   # UNIT
  def preprocess(cwd: Dir.pwd, src:,                    # UNIT
  def get_live_vars(src)                   # UNIT

---- File: lib/helpers-repl.rb
 
  require 'exceptions'
    def self.choose_method(cmd)
    def ask(prompt, meth = :to_s)
    def ask!(prompt, meth = :to_s)
    def get_integer(arg)
    def check_file_exists(file)
    def error_cant_delete(files)
    def tags_for_view(vname = @blog.view)
    def all_tags

---- File: lib/exceptions.rb
 
  def make_exception(sym, str, target_class = Object)

---- File: lib/lowlevel.rb
 
    def _tmp_error(err)
    def dump(obj, name)
    def timelog(line, file)
    def system!(str, show: false)
    def _get_data?(file)   # File need not exist                   # UNIT
    def _get_data(file)                   # UNIT
    def read_pairs(file)       # returns a hash                   # UNIT
    def read_pairs!(file)       # returns an openstruct                   # UNIT
    def copy(src, dst)
    def copy!(src, dst)
    def create_dirs(*dirs)
    def interpolate(str, bind)                   # UNIT
    def error(err)
    def find_item(list, &block)                   # UNIT
    def find_item!(list, &block)                   # UNIT
    def exactly_one(list, tag = nil, &block)                   # UNIT
    def addvar(vars, hash)                   # UNIT

---- File: lib/newpost.rb
 
  require 'rubytext'
  def ask(prompt)  # elsewhere?
  def enter_title
  def edit_teaser
  def add_views
  def add_tags
  def import_assets
  def save_post
  def quit_post

---- File: lib/view.rb
 
  require 'logging'
  class RuneBlog::View
    attr_reader :name, :state, :globals
    attr_accessor :publisher
    include RuneBlog::Helpers
    def initialize(name)
    def dump_globals_stderr
    def get_globals(force = false)
    def dir
    def local_index
    def index
    def to_s
    def can_publish?
    def recent?(file)

---- File: lib/pathmagic.rb
 
    def /(right)

---- File: lib/runeblog.rb
 
  require 'date'
  require 'find'
  require 'ostruct'
  require 'logging'
  require 'runeblog_version'
  require 'helpers-blog'
  require 'view'
  require 'publish'
  require 'post'
  require 'pathmagic'
  require 'exceptions'
    def check_nonempty_string(str)                   # UNIT
    def check_view_parameter(view)                   # UNIT
    def check_integer(num)                   # UNIT
    def confirm(exception, *args, &block)                   # UNIT
    def check_error(exception, *args, &block)
  class RuneBlog
    include Helpers
    include ErrorChecks
    class << self
      attr_accessor :blog
      include Helpers
      include ErrorChecks
    attr_reader :views, :sequence
    attr_accessor :root, :editor, :features
    attr_accessor :view  # overridden
    attr_accessor :post
    attr_accessor :post_views, :post_tags, :dirty_views
      class Default
      def RuneBlog.post_template(num: 0, title: "No title", date: nil, view: "test_view", 
    def self.create_new_blog_repo(root_rel = ".blogs")
    def self.open(root_rel = ".blogs")
    def initialize(root_rel = ".blogs")   # always assumes existing blog
    def complete_file(name, vars, hash)                   # UNIT
    def _generate_settings(view = nil)                   # UNIT
    def _generate_global                   # UNIT
    def read_metadata                   # UNIT
    def _deploy_local(dir)
    def process_post(sourcefile)                   # UNIT
    def inspect
    def view?(name)                   # UNIT
    def str2view(str)                   # UNIT
    def _set_publisher                   # UNIT
    def view=(arg)                   # UNIT
    def get_sequence                   # UNIT
    def next_sequence                   # UNIT
    def viewdir(v = nil)   # delete?
    def self.exist?
    def mark_last_published(str)
    def add_view(view_name)                   # UNIT
    def make_empty_view_tree(view_name)
    def check_valid_new_view(view_name)                   # UNIT
    def create_view(view_name)                   # UNIT
    def delete_view(name, force = false)                   # UNIT
    def view_files
    def post_lookup(postid)    # side-effect?
    def index_entry(slug)                   # UNIT
    def _sorted_posts
    def collect_recent_posts(file = "recent.html")
    def create_new_post(title, testing = false, teaser: nil, body: nil, 
    def import_legacy_post(file, oldfile, testing = false)
    def posts
    def drafts
    def all_drafts
    def change_view(view)
    def generate_index(view)
    def generate_view(view)  # huh?
    def _get_views(draft)
    def _copy_get_dirs(draft, view)
    def _post_metadata(draft, pdraft)
    def copy_widget_html(view)
    def _handle_post(draft, view_name = self.view.to_s)
    def _check_view?(view)
    def generate_post(draft, force = false)
    def remove_post(num)
    def undelete_post(num)
    def delete_draft(num)
    def make_slug(meta)

---- File: lib/repl.rb
 
  require 'runeblog'
  require 'ostruct'
  require 'helpers-repl'  # FIXME structure
  require 'pathmagic'
  require 'exceptions'
  require 'menus'
    def edit_file(file, vim: "")
    def cmd_quit
    def cmd_clear
    def cmd_version
    def cmd_config
    def cmd_manage(arg)
    def _manage_pinned   # cloned from manage_links
    def _manage_navbar   # cloned from manage_pages
    def _manage_links
    def _manage_pages    # FIXME move into widget code
    def cmd_import
    def cmd_browse
    def cmd_preview
    def cmd_publish
    def fresh?(src, dst)                   # UNIT
    def regen_posts
    def cmd_rebuild
    def cmd_change_view(arg = nil)
    def modify_view_global(view_name)
    def modify_view_settings(name:, title:, subtitle:, domain:)
    def cmd_new_view(arg)
    def cmd_new_view_ORIG(arg)
    def cmd_new_post
    def _remove_post(arg, testing=false)
    def cmd_remove_post(arg)
    def cmd_edit_post(arg)
    def view2title(name)  # FIXME: crufty as hell
    def cmd_list_views
    def cmd_list_posts
    def cmd_list_drafts
    def cmd_list_assets
    def cmd_ssh
    def cmd_INVALID(arg)
    def cmd_legacy
    def cmd_list_widgets
    def cmd_install_widget(arg)
    def cmd_enable_widget(arg)
    def cmd_disable_widget(arg)
    def cmd_update_widget(arg)
    def cmd_help

---- File: lib/runeblog_version.rb
 
  class RuneBlog
  class RuneBlog
    class Default
    class View
    class Publishing
    class Post
  def prefix(num)

---- File: lib/helpers-blog.rb
 
  require 'runeblog_version'
  require 'fileutils'
  require 'processing'
  require 'pathmagic'
  require 'lowlevel'
    def quit_RubyText
    def read_features(view = nil)                   # UNIT
    def write_features(hash, view = nil)                   # UNIT
    def get_repo_config(root = ".blogs")                   # UNIT
    def get_all_widgets(dest)                   # UNIT
    def get_widget(dest, widget: :all)   # recursive                   # UNIT
    def copy_data(dest)                   # UNIT
    def read_vars(file)                   # UNIT
    def retrieve_views   # read from filesystem                   # UNIT
    def write_repo_config(root: "#{Dir.pwd}/.blogs", view: nil, editor: "/usr/local/bin/vim")                   # UNIT
    def new_sequence                   # UNIT
    def subdirs(dir)                   # UNIT
    def find_draft_slugs                   # UNIT

---- File: lib/liveblog.rb
 
  require 'ostruct'
  require 'pp'
  require 'date'
  require 'find'
  require 'runeblog'
  require 'pathmagic'
  require 'processing'
  def init_liveblog    # FIXME - a lot of this logic sucks
  def dropcap                   # UNIT
  def post                   # UNIT
    def _got_python?                   # UNIT
    def _reddit_post_url(vdir, date, title, url)                   # UNIT
  def post_toolbar
  def post_trailer
  def faq
  def backlink
  def code
  def _read_navbar_data
  def banner
  def _svg_title(*args)
  def quote
  def categories   # does nothing right now
  def style
  def h1; _passthru "<h1>#{@_data}</h1>"; end
  def h2; _passthru "<h2>#{@_data}</h2>"; end
  def h3; _passthru "<h3>#{@_data}</h3>"; end
  def h4; _passthru "<h4>#{@_data}</h4>"; end
  def h5; _passthru "<h5>#{@_data}</h5>"; end
  def h6; _passthru "<h6>#{@_data}</h6>"; end
  def hr; _passthru "<hr>"; end
  def nlist
  def list
  def list!
  def inset
  def title
  def pubdate
  def tags
  def views
  def pin
  def write_post
  def teaser
  def finalize
  def head  # Does NOT output <head> tags
  def meta
  def recent_posts    # side-effect
  def _make_class_name(app)
  def _load_local(widget)
  def _handle_standard_widget(tag)
  def sidebar
  def stylesheet
  def script
  class Livetext::Functions
    def br(n="1")
    def h1(param); "<h1>#{param}</h1>"; end
    def h2(param); "<h2>#{param}</h2>"; end
    def h3(param); "<h3>#{param}</h3>"; end
    def h4(param); "<h4>#{param}</h4>"; end
    def h5(param); "<h5>#{param}</h5>"; end
    def h6(param); "<h6>#{param}</h6>"; end
    def hr(param=nil)
    def image(param)
  class Livetext::Functions
    def _var(name)
  def tag_cloud
  def vnavbar
  def hnavbar
  def navbar
  def _make_navbar(orient = :horiz)
  def _html_body(file, css = nil)
  def _errout(*args)
  def _passthru(line)
  def _passthru_noline(line)
  def _write_metadata
  def _post_lookup(postid)    # side-effect
  def _card_generic(card_title:, middle:, extra: "")
  def _var(name)  # FIXME scope issue!
  def _main(url)
  def _blank(url)

---- File: lib/post.rb
 
  require 'runeblog'
  require 'pathmagic'
  class RuneBlog::Post
    attr_reader :num, :title, :date, :views, :num, :slug
    attr_accessor :meta, :blog, :draft
    include RuneBlog::Helpers
    def self.load(post)
    def initialize
    def self.create(title:, teaser:, body:, pubdate: Time.now.strftime("%Y-%m-%d"),
    def edit
    def build
  class RuneBlog::ViewPost
    attr_accessor :nslug, :aslug, :num, :view, :blog
    attr_accessor :path, :title, :date, :teaser_text
    def self.make(blog:, view:, nslug:)
    def repo(subdir = "")
    def slug(num = true, ext = "")
    def initialize(view, postdir)
    def get_dirs

---- File: lib/logging.rb
 
    def outlog(str = "", stderr: false)
    def log!(str: "", enter: nil, args: [], pwd: false, dir: false, level: 0, stderr: false)

---- File: lib/widgets/tag-cloud/tag-cloud.rb
 
  class ::RuneBlog::Widget
    class TagCloud
      def initialize(repo)
      def build
      def edit_menu
      def refresh

---- File: lib/widgets/bydates/bydates.rb
 
  class ::RuneBlog::Widget
    class Bydates
      def initialize(repo)
      def build
      def edit_menu
      def refresh

---- File: lib/widgets/sitemap/sitemap.rb
 
  class ::RuneBlog::Widget
    class Sitemap
      def initialize(repo)
      def build
      def edit_menu
      def refresh

---- File: lib/widgets/search/search.rb
 
  class ::RuneBlog::Widget
    class Search
      def initialize(repo)
      def build
      def edit_menu
      def refresh

---- File: lib/widgets/news/news.rb
 
  class ::RuneBlog::Widget
    class News
      def initialize(repo)
      def build
      def _html_body(file, css = nil)
      def write_main
      def write_card
      def edit_menu
      def refresh

---- File: lib/widgets/links/links.rb
 
  require 'liveblog'
  class ::RuneBlog::Widget
    class Links
      def initialize(repo)
      def build
      def _html_body(file, css = nil)
      def write_main
      def write_card
      def edit_menu
      def refresh

---- File: lib/widgets/pinned/pinned.rb
 
  class ::RuneBlog::Widget
    class Pinned
      def initialize(repo)
    def read_metadata
      def _html_body(file, css = nil)    # FIXME
      def build
      def write_main
      def write_card
      def edit_menu
      def refresh

---- File: lib/widgets/pages/pages.rb
 
  class ::RuneBlog::Widget
    class Pages
      def initialize(repo)
      def build
      def _html_body(file, css = nil)
      def write_main
      def write_card
      def manage
      def edit_menu
      def refresh
