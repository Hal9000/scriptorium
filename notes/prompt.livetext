Livetext is a text processor in the tradition of things such as nroff and troff, 
but with differing functionality. By default, it emits HTML, but in principle
could output any format such as PDF, SVG, or others.

A "dot command" has a dot at the start of a line; the dot is immediately followed
by an identifier. Many are predefined; each corresponds closely to a Ruby method.
Some may have "parameters" on the same line; these may be optional or required, 
depending on the command. Some may take a block of text (a subsequent group of 
lines delimited by the special .end command). 

Some "special" dot commands are:
 - .include <file> Include a file and process it
 - .copy <file>    Include a file without processing it

Some HTML-specific commands are .h1, .h2, .list, and so on.

A single-line comment starts with a dot-space (". "); a block comment starts with
.comment (and ends with .end).

Any line that is not part of a dot command (or its body) is processed. By default,
it is output "as is" (assuming there is nothing special embedded in it). However,
it may contain intra-line formatting, variable references, or function calls.

Within a line, there may be variable references beginning with a $. These names
may contain alphanumerics, underscore, and period (the period is for the illusion
of namespacing). Example:  Today is $Date and $text.color is my foreground.

Function calls start with $$ and have names like variable names. A function may
have no parameters; one parameter separated by a colon (no embedded spaces); or
one parameter inside brackets. No function or parameter may span more than one
line:  This is a $$func and so is $$func2:this and $$func3[so is this].

Variables are evaluated before functions so that they may be passed into 
functions. There is no deeper nesting permitted.

Intra-line formatting may be done with "markers" such as * for bold and _ for
italics. These are unconventional: a single marker is for a token with no
embedded spaces; a double marker has no embedded spaces but is terminated by
a period or comma; and brackets may be used for strings having spaces.
Example: This is *bold and so is **this, and *[this is also bold].

Besides * and _, we have ` for code and ~ for strikethrough.




